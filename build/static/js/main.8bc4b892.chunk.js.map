{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDeleteEvent","id","rowCount","state","splice","setState","numberOfRow","numberOfColumn","handleClick","bind","assertThisInitialized","_this2","refs","row","value","column","exportBtn","disabled","Array","from","length","map","_","rowIdx","react_default","a","createElement","key","colIdx","App_EditableCell","type","onClick","html","document","querySelector","outerHTML","export_to_csv","filename","csv","rows","querySelectorAll","i","cols","j","push","join","download_csv","csvFile","downloadLink","Blob","download","href","window","URL","createObjectURL","style","display","body","appendChild","click","_this3","className","ref","maxLength","onkeyup","onExportClick","App_Table","Component","Table","EditableCell","React","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.8bc4b892.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      numberOfRow: 0,\r\n      numberOfColumn: 0,\r\n      rowCount: 0\r\n    }\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  //Add row and column click handler\r\n  handleClick() {\r\n    let numberOfColumn = 0;\r\n    let numberOfRow = 0;\r\n\r\n    numberOfRow = this.refs.row.value;\r\n    numberOfColumn = this.refs.column.value;\r\n\r\n    if(numberOfRow > 0 && numberOfColumn > 0) {\r\n      this.refs.exportBtn.disabled = false;\r\n    }\r\n\r\n    var rowCount = Array.from({ length: numberOfRow }).map((_, rowIdx) => (\r\n      <tr key={rowIdx}>{\r\n        Array.from({length: numberOfColumn}).map((_, colIdx) => (\r\n          <EditableCell key={colIdx}/>\r\n        ))\r\n      }\r\n      <td>\r\n        <input type=\"button\" onClick={() => this.onDeleteEvent(rowIdx)} value=\"X\" />\r\n      </td>\r\n      </tr>\r\n      \r\n    ));\r\n    \r\n    this.setState({\r\n      numberOfRow,\r\n      numberOfColumn,\r\n      rowCount\r\n    });\r\n  }\r\n\r\n\r\n  ////Export CSV Click handler\r\n  onExportClick() {\r\n    var html = document.querySelector(\"table\").outerHTML;\r\n\t  this.export_to_csv(html, \"table.csv\");\r\n  }\r\n\r\n  //Export to CSV function\r\n  export_to_csv(html, filename) {\r\n    var csv = [];\r\n    var rows = document.querySelectorAll(\"table tr\");\r\n    \r\n      for (var i = 0; i < rows.length-1; i++) {\r\n        var row = [], cols = rows[i].querySelectorAll(\"input\");\r\n      \r\n          for (var j = 0; j < cols.length; j++) {\r\n              row.push(cols[j].value);\r\n          }\r\n          \r\n      csv.push(row.join(\",\"));\t\t\r\n    }\r\n    this.download_csv(csv.join(\"\\n\"), filename);\r\n  }\r\n\r\n  //Download CSV method\r\n  download_csv(csv, filename) {\r\n      var csvFile;\r\n      var downloadLink;\r\n\r\n      csvFile = new Blob([csv], {type: \"text/csv\"});\r\n\r\n      downloadLink = document.createElement(\"a\");\r\n      downloadLink.download = filename;\r\n      downloadLink.href = window.URL.createObjectURL(csvFile);\r\n      downloadLink.style.display = \"none\";\r\n      document.body.appendChild(downloadLink);\r\n      downloadLink.click();\r\n  }\r\n\r\n  //Delete row handler\r\n  onDeleteEvent = id => {\r\n    let rowCount = this.state.rowCount;\r\n    rowCount.splice(id, 1);\r\n\r\n    this.setState({\r\n      rowCount\r\n    });\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className=\"userInput\">\r\n            <label>Row</label>\r\n            <input type=\"text\" ref=\"row\" maxLength=\"2\" onkeyup=\"this.value = this.value.replace(/[^a-z]/, '')\" />\r\n            <label>Column</label>\r\n            <input type=\"text\" ref=\"column\" maxLength=\"2\" onkeyup=\"this.value = this.value.replace(/[^a-z]/, '')\" />\r\n            <button onClick={this.handleClick}>Add</button>\r\n            <button ref=\"exportBtn\" disabled onClick={() => this.onExportClick()}>Export to CSV</button>\r\n          </div>\r\n          <div className=\"display\">\r\n            <Table rowCount={ this.state.rowCount } />\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Table extends Component {\r\n  render() {\r\n      let rowCount = this.props.rowCount;\r\n      return (\r\n        <div id=\"Table\">\r\n          <table>\r\n              {rowCount}\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nclass EditableCell extends React.Component {\r\n  render() {\r\n    return (\r\n      <td>\r\n        <input type='text' />\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}